/*
Counting words

Implement these two methods for a given array of string:

* wordCount that returns a SortedMap<String, Integer> where keys are all different strings and values are the number of times that 
  string appears in the array. The method takes an array of strings as input;
* printMap that prints all entries of the map ("key : value").

Sample Input 1:
a b b c d a b

Sample Output 1:
a : 2
b : 3
c : 1
d : 1


*/

import java.util.*;

class MapUtils {

    public static SortedMap<String, Integer> wordCount(String[] strings) {
        // write your code here
        SortedMap<String, Integer> map = new TreeMap<>();

        for (String string : strings) {
            map.put(string, map.getOrDefault(string, 0) + 1);
        }

        // enhanced for loop is easier so I did it above
//       for (int i = 0; i < strings.length; i++) {
//           map.put(strings[i], map.getOrDefault(strings[i], 0) + 1 );
//       }

        return map;
    }

    public static void printMap(Map<String, Integer> map) {
        // write your code here
        for (var entry : map.entrySet()) {
            System.out.println(entry.getKey() + " : " + entry.getValue());
        }
    }

}

/* Do not change code below */
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] words = scanner.nextLine().split(" ");
        MapUtils.printMap(MapUtils.wordCount(words));
    }
}


