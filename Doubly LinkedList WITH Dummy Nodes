public class Main {

  ListNode head;
  ListNode tail;

  public static class ListNode {
    int val;
    ListNode next;
    ListNode prev;

    ListNode (int val) {
      this.val = val;
    }
    
  }

  // constructor (creating head and tail sentinal/dummy nodes)
  public Main() {
    this.head = new ListNode(0);  // setting a random value 0
    this.tail = new ListNode(0);
    // this.head = null;
    // this.tail = null;
    head.next = tail;
    tail.prev = head; 
  }

  

  // add to end
  public void addToEnd (ListNode nodeToAdd) {
    nodeToAdd.next = tail;
    nodeToAdd.prev = tail.prev;
    tail.prev.next = nodeToAdd;
    tail.prev = nodeToAdd;
  }

  // remove from end
  public void removeFromEnd() {
    // if nothing left
    if (head.next == tail) {
      return;
    }

    ListNode nodeToRemove = tail.prev;
    nodeToRemove.prev.next = tail;
    tail.prev = nodeToRemove.prev;  
  }

  // add to start
  public void addToStart (ListNode nodeToAdd) {
    nodeToAdd.prev = head;
    nodeToAdd.next = head.next;
    head.next.prev = nodeToAdd;
    head.next = nodeToAdd;
  }

  // remove from start
  public void removeFromStart() {
    // if nothing left
    if (head.next == tail) {
      return;
    }

    ListNode nodeToRemove = head.next;
    nodeToRemove.next.prev = head;
    head.next = nodeToRemove.next;
  }
  
  
  public static void main(String[] args) {
    // insert values here 

    Main list1 = new Main();

    // create Nodes
    ListNode one = new ListNode(1);
    ListNode two = new ListNode(2);
    ListNode three = new ListNode(3);
    ListNode four = new ListNode(4);

    // adding nodes to the list
    list1.addToEnd(one);
    list1.addToEnd(two);
    list1.addToEnd(three);
    list1.addToEnd(four);

    // no longer needed because "addToEnd" handles this
    // one.next = two;
    // two.prev = one;
    // two.next = three;
    // three.prev = two;

    
    // start from the actual 1st node
    ListNode current = list1.head.next;  
    
    // while (current != null) {

    System.out.println("Original List: ");
    // go until we reach the tail (print the list)
    while (current != list1.tail) {
      System.out.print(current.val);    // current node
      if (current.next != list1.tail) {
        // print "<->" only if there is 
        System.out.print(" <-> ");
      }
      current = current.next;
    }
    System.out.println("\n");



    // removing node at the end of the list
    list1.removeFromEnd();

    System.out.println("List after removing from end: ");
    // printing list after removal from end
    current = list1.head.next;    // move pointer back to front
    while (current != list1.tail) {
      System.out.print(current.val);    // current node
      if (current.next != list1.tail) {
        // print "<->" only if there is 
        System.out.print(" <-> ");
      }
      current = current.next;
    }
    System.out.println("\n");

    
    // removing node at the front of the list
    list1.removeFromStart();

    System.out.println("List after removing from start: ");
    // printing list after removal from start
    current = list1.head.next;   // move pointer back to front
    while (current != list1.tail) {
      System.out.print(current.val);    // current node
      if (current.next != list1.tail) {
        // print "<->" only if there is 
        System.out.print(" <-> ");
      }
      current = current.next;
    }
    System.out.println("\n");

    
    
  }


}
